// Generated by CoffeeScript 1.8.0
var React, imageExists, isArray, isRetina, objectAssign, path;

React = require('react');

isRetina = require('is-retina');

isArray = require('isarray');

imageExists = require('image-exists');

path = require('path');

objectAssign = require('object-assign');

module.exports = React.createClass({
  displayName: 'RetinaImage',
  propTypes: {
    src: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]).isRequired,
    checkIfRetinaImgExists: React.PropTypes.bool,
    retinaImageSuffix: React.PropTypes.string,
    handleOnLoad: React.PropTypes.func
  },
  getDefaultProps: function() {
    return {
      checkIfRetinaImgExists: true,
      forceOriginalDimensions: true,
      retinaImageSuffix: '@2x'
    };
  },
  componentWillReceiveProps: function(nextProps) {
    if (nextProps.src !== this.props.src) {
      return this.setState(objectAssign(this.wrangleProps(nextProps), {
        width: null,
        height: null,
        imgLoaded: null,
        retinaImgExists: null,
        retinaCheckComplete: null
      }));
    }
  },
  getInitialState: function() {
    return this.wrangleProps();
  },
  componentDidMount: function() {
    return this.checkForRetina();
  },
  componentDidUpdate: function() {
    return this.checkForRetina();
  },
  render: function() {
    var props, _ref, _ref1;
    props = this.props;
    if (((_ref = this.state) != null ? _ref.width : void 0) && (this.props.width == null)) {
      props.width = this.state.width;
    }
    if (((_ref1 = this.state) != null ? _ref1.height : void 0) && (this.props.height == null)) {
      props.height = this.state.height;
    }
    return React.createElement("img", React.__spread({
      "ref": "img"
    }, this.props, {
      "src": this.state.src
    }, {
      "onLoad": this.handleOnLoad
    }));
  },
  wrangleProps: function(props) {
    if (props == null) {
      props = this.props;
    }
    if (isArray(props.src)) {
      return {
        src: props.src[0],
        srcIsArray: true
      };
    } else {
      return {
        src: props.src,
        srcIsArray: false
      };
    }
  },
  checkForRetina: function() {
    if (this.state.retinaCheckComplete) {
      return;
    }
    if (isRetina() && this.props.checkIfRetinaImgExists) {
      imageExists(this.getRetinaPath(), (function(_this) {
        return function(exists) {
          var _ref;
          if (exists && ((_ref = _this.state) != null ? _ref.imgLoaded : void 0)) {
            return _this.swapSrc(_this.getRetinaPath());
          } else if (exists) {
            return _this.setState({
              retinaImgExists: true
            });
          }
        };
      })(this));
    } else if (isRetina() && !this.props.checkIfRetinaImgExists) {
      this.swapSrc(this.getRetinaPath());
    }
    return this.setState({
      retinaCheckComplete: true
    });
  },
  handleOnLoad: function(e) {
    var _ref;
    if (this.props.handleOnLoad != null) {
      this.props.handleOnLoad(e);
    }
    if (this.props.forceOriginalDimensions) {
      this.setState({
        width: this.refs.img.getDOMNode().clientWidth,
        height: this.refs.img.getDOMNode().clientHeight
      });
    }
    this.setState({
      imgLoaded: true
    });
    if ((_ref = this.state) != null ? _ref.retinaImgExists : void 0) {
      return this.swapSrc(this.getRetinaPath());
    }
  },
  getRetinaPath: function() {
    var basename, src;
    if (this.state.srcIsArray) {
      return this.props.src[1];
    } else {
      basename = path.basename(this.props.src, path.extname(this.props.src));
      basename = basename + this.props.retinaImageSuffix + path.extname(this.props.src);
      src = this.props.src.replace(path.basename(this.props.src), basename);
      return src;
    }
  },
  swapSrc: function(src) {
    return this.refs.img.getDOMNode().src = src;
  }
});
